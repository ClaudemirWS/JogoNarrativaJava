
import java.util.List;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Claudemir
 */
public class MainScreen extends javax.swing.JFrame {

    /**
     * Creates new form MainScreen
     */
    public MainScreen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        entraDados = new javax.swing.JPanel();
        tbl_Nome = new javax.swing.JLabel();
        txt_Nome = new javax.swing.JTextField();
        tbl_Email = new javax.swing.JLabel();
        txt_Email = new javax.swing.JTextField();
        tbl_Idade = new javax.swing.JLabel();
        txt_Idade = new javax.swing.JFormattedTextField();
        Salvar = new javax.swing.JButton();
        Excluir = new javax.swing.JButton();
        mostraDados = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_Alunos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 660));

        entraDados.setBorder(javax.swing.BorderFactory.createTitledBorder("Entrada de dados"));

        tbl_Nome.setText("Nome");

        tbl_Email.setText("E-mail");

        tbl_Idade.setText("Idade");

        txt_Idade.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0"))));

        Salvar.setText("Salvar");
        Salvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalvarActionPerformed(evt);
            }
        });

        Excluir.setText("Excluir");
        Excluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExcluirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout entraDadosLayout = new javax.swing.GroupLayout(entraDados);
        entraDados.setLayout(entraDadosLayout);
        entraDadosLayout.setHorizontalGroup(
            entraDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(entraDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(entraDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(entraDadosLayout.createSequentialGroup()
                        .addComponent(tbl_Nome, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_Nome))
                    .addGroup(entraDadosLayout.createSequentialGroup()
                        .addComponent(tbl_Email, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_Email))
                    .addGroup(entraDadosLayout.createSequentialGroup()
                        .addComponent(tbl_Idade, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txt_Idade, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(85, 85, 85)
                        .addComponent(Salvar, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Excluir, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        entraDadosLayout.setVerticalGroup(
            entraDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(entraDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(entraDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tbl_Nome)
                    .addComponent(txt_Nome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(entraDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tbl_Email)
                    .addComponent(txt_Email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(entraDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tbl_Idade)
                    .addComponent(txt_Idade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Salvar)
                    .addComponent(Excluir))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        mostraDados.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados"));

        tbl_Alunos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "E-mail", "Idade"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbl_Alunos);

        javax.swing.GroupLayout mostraDadosLayout = new javax.swing.GroupLayout(mostraDados);
        mostraDados.setLayout(mostraDadosLayout);
        mostraDadosLayout.setHorizontalGroup(
            mostraDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mostraDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mostraDadosLayout.setVerticalGroup(
            mostraDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mostraDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(entraDados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mostraDados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(entraDados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mostraDados, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalvarActionPerformed
        /*
            * Antes de fazermos qualquer coisa precisamos
            * saber se há algum campo vazio, como já criamos
            * um método que faz isso, é só chamá-lo. Lembre-se
            * que se algum campo estiver vazio o retorno é "true",
            * caso contrário é false. Usamos ele no if precedido pelo
            * "!" (ponto de exclamação). Desse forma lê-se "se
            * campos não vazios". Dessa maneira se o retorno for
            * "false" podemos executar a inserção do aluno. 
         */
        if (!emptyFields()) {
            /*
                * Agora basta enviar o aluno que vai retornar
                * do método getAluno para o método inserir
                * aluno. O método getAluno(), vai ser executado
                * antes do inserirAluno.
             */

            inserirAluno(getAluno());

            /*
                * Depois de inserir o aluno é uma boa prática 
                * limpar os campos do formulário e setar o
                * cursor no primeiro campo com o método
                * "requestFocus()";
             */
            txt_Nome.setText("");
            txt_Email.setText("");
            txt_Idade.setText("");

            txt_Nome.requestFocus();
        }
    }//GEN-LAST:event_SalvarActionPerformed

    private void ExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExcluirActionPerformed
        /*
            * Agora basta enviar a posição do aluno para
            * o método excluirAluno(int posAluno).
            * O método getPosicaoAluno(), vai ser executado
            * antes do excluirAluno.
         */
        excluirAluno(getPosicaoAluno());
    }//GEN-LAST:event_ExcluirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Excluir;
    private javax.swing.JButton Salvar;
    private javax.swing.JPanel entraDados;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mostraDados;
    private javax.swing.JTable tbl_Alunos;
    private javax.swing.JLabel tbl_Email;
    private javax.swing.JLabel tbl_Idade;
    private javax.swing.JLabel tbl_Nome;
    private javax.swing.JTextField txt_Email;
    private javax.swing.JFormattedTextField txt_Idade;
    private javax.swing.JTextField txt_Nome;
    // End of variables declaration//GEN-END:variables

    /**
     * Passo A. 1 Definição do vetor com os títulos de cada coluna da tabela
     */
    private final String[] tableColumns = {"Nome", "Email", "Idade"};

    /*
      * Passo A. 2
      * Definição do table model que vai conter a nossa lista de alunos
      * o primeiro parâmetro é nosso vetor com os títulos das colunas
      * e o segundo parâmetro é o índice da linha que se quer exibir os
      * títulos. Nesse caso na primeira linha.
     */
    DefaultTableModel tableModel = new DefaultTableModel(tableColumns, 0);

    /*
      * Passo C.
      * Definição do vetor com os títulos de cada coluna da tabela
     */
    private List<Aluno> alunosList = new ArrayList<>();

    /*
    * Metodo emptyFields(), retorna "true" quando qualquer um dos campos
    * estiver vazio e "false" quando todos estiverem preenchidos.   
     */
    private boolean emptyFields() {
        /*
      * Variável empty assume “true” por padrão e só vai mudar o seu estado
      * após verificarmos se todos os campos estão preenchidos. É ela que
      * retornamos ao final do método.
         */
        boolean empty = true;

        /*
            * Agora vamos testar campo a campo e exibir avisos caso encontre
            * algum campo vazio.
         */
        if (txt_Nome.getText().trim().isEmpty()) {
            /*
                * se o campo txtNome estiver vazio exibimos a mensagem
                * de campo vazio. Caso contrário testamos o próximo
             */
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Nome não pode ser vazio.");
        } else if (txt_Email.getText().trim().isEmpty()) {
            /*
                * se o campo txtEmail estiver vazio exibimos a mensagem de campo
                * vazio. Caso contrário testamos o próximo campo.
             */
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Email não pode ser vazio.");
        } else if (txt_Idade.getText().trim().isEmpty()) {
            /*
                * se o campo txtIdade estiver vazio exibimos a mensagem de campo
                * vazio. Caso contrário testamos o próximo campo.
             */
            JOptionPane.showMessageDialog(rootPane, "ATENÇÃO! Idade não pode ser vazio.");
        } else {
            /*
                * se cairmos nessa condição é porque não existem campos vazios,
                * logo, a variável "empty" deve mudar seu valor para "false".
             */

            empty = false;
        }

        /*
            * Aqui retornamos a variável "empty"  
         */
        return empty;

    }

    /*
  * Metodo getAluno(), retorna um aluno
  * com valor em todos os atributos
     */
    private Aluno getAluno() {

        /*
            * Criação de objeto Auno, ou seja, uma instância de Aluno
         */
        Aluno aluno = new Aluno();

        /*
            * Agora que temos um objeto aluno, vamos atribuir os valores
            * que foram digitados nos campos de texto. Nome, email e idade.
            * Para "nome", vamos deixar todas as letras em maiúsculo. Para
            * "email", vamos deixar todas as letras em minúsculo. Para idade, é
            * preciso, converter para inteiro;
         */
        aluno.setNome(txt_Nome.getText().toUpperCase());
        aluno.setEmail(txt_Email.getText().toLowerCase());
        aluno.setIdade(Integer.parseInt(txt_Idade.getText()));

        /*
            * Aqui retornamos o objeto "aluno"  
         */
        return aluno;
    }

    /*
  * Metodo inserirAluno(Aluno aluno), insere o aluno
  * na lista de alunos
     */
    private void inserirAluno(Aluno aluno) {
        /*
    * Inserir o aluno na lista
         */
        alunosList.add(aluno);

        /*
    * Inclusão do método atualizarTabela()
         */
        atualizarTabela();
    }

    /*
        * Metodo atualizarTabela(), vai atualizar a tabela toda vez
        * que inserido, removido ou alterado dados de um aluno;
     */
    private void atualizarTabela() {

        /*
            * antes de atualizar a tabela é uma boa prática
            * verificar se a lista de alunos NÃO está vazia, pois,
            * se estiver vazia não precisamos atualizar.
         */
        if (!alunosList.isEmpty()) {

            /*
                * Como não está vazia, vamos criar um Aluno que será
                * será instanciado em cada ocorrência de aluno na lista,
                * isso dentro de um laço de repetição "for".
             */
            Aluno aluno;

            /*
                * Também é necessário recriar o tableModel, para limpar
                * os dados anteriores
             */
            tableModel = new DefaultTableModel(tableColumns, 0);

            /*
                * Agora vamos criar o for que vai repetir
                * até o tamanho da lista de alunos
             */
            for (int i = 0; i < alunosList.size(); i++) {

                /*
                    * Instância de Aluno com os dados do aluno
                    * de cada posição da lista
                 */
                aluno = alunosList.get(i);

                /*
                    * Agora vamos criar um vetor de String com cada um
                    * dos valores dos atributos do aluno encontrado.
                    * Vamos chamar de "rowData".
                 */
                String[] rowData = {aluno.getNome(), aluno.getEmail(), String.valueOf(aluno.getIdade())};

                /*
                    * Agora adicionamos o vetor de dados na tableModel
                 */
                tableModel.addRow(rowData);
            }

            /*
                * Após concluído o for e com isso colocar todos os
                * dados antigos e os novos no tableModel, é hora de
                * setar o modelo na tabela.
             */
            tbl_Alunos.setModel(tableModel);

        } else {
            /*
                * No caso de excluirmos o último aluno da lista
                * teremos de criar uma tableModel nova para "limpar
                * a tabela" e setar na tblAlunos.
             */

            tableModel = new DefaultTableModel(tableColumns, 0);
            tbl_Alunos.setModel(tableModel);
        }
    }

    /*
        * Metodo getPosicaoAluno(), vai retornar um valor inteiro maior ou igual
        * a zero, caso algum aluno esteja selecionado ou -1 caso não haja seleção.
     */
    private int getPosicaoAluno() {

        /*
            * Criação da variável posAluno do tipo inteiro que vai receber 
            * o retorno do método getSelectedRow() da tblAlunos
         */
        int posAluno = tbl_Alunos.getSelectedRow();

        /*
            * Caso o valor seja -1 vamos informar ao usuário para ele
            * selecionar o aluno
         */
        if (posAluno == -1) {
            JOptionPane.showMessageDialog(rootPane, "Selecione um aluno");
        }

        /*
            * Aqui retornamos a variável posAluno;  
         */
        return posAluno;
    }

    /*
    * Metodo sem retorno excluirAluno(int posAluno), vai pedir confirmação
    * para excluir o aluno da posição informada.
     */
    private void excluirAluno(int posAluno) {

        /*
            * Antes de realizar a exclusão precisamos ter certeza que a posição
            * é válida, ou seja, maior ou igual a zero;
         */
        if (posAluno >= 0) {

            /*
                * Agora vamos pedir ao usuário a confirmação de exclusão.
                * Utilizaremos o método showOptionDialog() que permite
                * uma melhor customização se o usuário clicar "sim" o retorno
                * é 0. Se clicar em "Não" o retorno é 1. Posição do vetor "options";
             */
            String[] options = {"Sim", "Não"};

            int deletar = JOptionPane.showOptionDialog(
                    rootPane,
                    "Tem certeza que deseja excluir?",
                    "Exclusão de aluno",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    options,
                    options[0]
            );

            /*
                * Se a variável deletar for 0 vamos deletar. Caso contrário
                * vamos limpar a seleção na tabela
             */
            if (deletar == 0) {
                /*
                    * Agora removemos a ocorrência desse aluno
                    * de alunosList por meio do método, remove(int index)
                 */
                alunosList.remove(posAluno);

                /*
                    * Depois de removido da lista precisamos atualizar a 
                    * tabela. Basta chamar o método atualizarTabela() já
                    * construído anteriormente
                 */
                atualizarTabela();
            } else {
                /*
                    * Limpar a seleção pois o usuário cancelou a exclusão.
                 */
                tbl_Alunos.clearSelection();
            }
        }
    }

}