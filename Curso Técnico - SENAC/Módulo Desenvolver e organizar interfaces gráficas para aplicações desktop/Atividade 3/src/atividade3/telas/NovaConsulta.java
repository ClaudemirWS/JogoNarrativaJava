package atividade3.telas;

import atividade3.model.Consulta;
import atividade3.model.ListaConsultas;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * @author Claudemir
 */
public class NovaConsulta extends javax.swing.JFrame {

    public NovaConsulta() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Cadastrar = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        lblNome = new javax.swing.JLabel();
        lblTelefone = new javax.swing.JLabel();
        lblCPF = new javax.swing.JLabel();
        lblData = new javax.swing.JLabel();
        cBoxPaciente = new javax.swing.JCheckBox();
        txtNome = new javax.swing.JTextField();
        txtTelefone = new javax.swing.JTextField();
        txtCPF = new javax.swing.JTextField();
        txtData = new javax.swing.JTextField();
        butCadastrar = new javax.swing.JButton();
        butVoltar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cadastrar Consulta");

        lblTitulo.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        lblTitulo.setText("Cadastrar Consulta");

        lblNome.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblNome.setText("Nome do(a) Paciente:");

        lblTelefone.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblTelefone.setText("Telefone:");

        lblCPF.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblCPF.setText("CPF:");

        lblData.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        lblData.setText("Data:");

        cBoxPaciente.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        cBoxPaciente.setText("Já é paciente");

        txtNome.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N

        txtTelefone.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        txtTelefone.setToolTipText("(000)00000-0000");
        txtTelefone.setActionCommand("<Not Set>");
        txtTelefone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTelefoneActionPerformed(evt);
            }
        });

        txtCPF.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        txtCPF.setToolTipText("000.000.000-00");

        txtData.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        txtData.setToolTipText("DD/MM/AAAA");

        butCadastrar.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        butCadastrar.setText("Cadastrar");
        butCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCadastrarActionPerformed(evt);
            }
        });

        butVoltar.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        butVoltar.setText("Voltar");
        butVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butVoltarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CadastrarLayout = new javax.swing.GroupLayout(Cadastrar);
        Cadastrar.setLayout(CadastrarLayout);
        CadastrarLayout.setHorizontalGroup(
            CadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CadastrarLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(CadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(CadastrarLayout.createSequentialGroup()
                        .addComponent(cBoxPaciente)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(CadastrarLayout.createSequentialGroup()
                        .addGroup(CadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(CadastrarLayout.createSequentialGroup()
                                .addGroup(CadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblNome)
                                    .addComponent(lblTelefone)
                                    .addComponent(lblCPF)
                                    .addComponent(lblData))
                                .addGap(37, 37, 37)
                                .addGroup(CadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNome)
                                    .addComponent(txtCPF)
                                    .addComponent(txtData, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)
                                    .addComponent(txtTelefone)))
                            .addGroup(CadastrarLayout.createSequentialGroup()
                                .addGroup(CadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblTitulo)
                                    .addGroup(CadastrarLayout.createSequentialGroup()
                                        .addComponent(butCadastrar, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(butVoltar, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(23, 23, 23))))
        );
        CadastrarLayout.setVerticalGroup(
            CadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CadastrarLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(lblTitulo)
                .addGap(31, 31, 31)
                .addGroup(CadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblNome)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(CadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTelefone)
                    .addComponent(txtTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(CadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCPF)
                    .addComponent(txtCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(CadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblData)
                    .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(cBoxPaciente)
                .addGap(33, 33, 33)
                .addGroup(CadastrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(butVoltar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(butCadastrar, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE))
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Cadastrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Cadastrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void butCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCadastrarActionPerformed

        if (!camposVazios()) {
            if (!camposValidos()) {
                //ADICIONA A LISTA
                inserirConsulta(getConsulta());

                txtNome.setText("");
                txtTelefone.setText("");
                txtCPF.setText("");
                txtData.setText("");

            }
        }

        //REMOVE A TELA DE CADASTRO E VOLTA AO MENU
        dispose();
    }//GEN-LAST:event_butCadastrarActionPerformed

    private void butVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butVoltarActionPerformed
        //REMOVE A TELA DE CADASTRO E VOLTA AO MENU
        dispose();
    }//GEN-LAST:event_butVoltarActionPerformed

    private void txtTelefoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTelefoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTelefoneActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Cadastrar;
    private javax.swing.JButton butCadastrar;
    private javax.swing.JButton butVoltar;
    private javax.swing.JCheckBox cBoxPaciente;
    private javax.swing.JLabel lblCPF;
    private javax.swing.JLabel lblData;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblTelefone;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JTextField txtCPF;
    private javax.swing.JTextField txtData;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtTelefone;
    // End of variables declaration//GEN-END:variables

    private final String[] tableColumns = {"Paciente", "CPF", "Telefone", "Data", "Já era paciente?", "Consulta finalizada"};
    DefaultTableModel tableModel = new DefaultTableModel(tableColumns, 0);

    //RETORNA OS VALORES PARA INSERIR NA LISTA
    private Consulta getConsulta() {

        //RECEBE DADOS DA CONSULTA
        Consulta consulta = new Consulta();
        consulta.setNome(txtNome.getText());
        consulta.setCPF(txtCPF.getText());
        consulta.setTelefone(txtTelefone.getText());
        consulta.setData(txtData.getText());
        //VERIFICA SE JÁ FOI PACIENTE
        if (cBoxPaciente.isSelected()) {
            consulta.setPaciente("Sim");
            cBoxPaciente.setSelected(false);
        } else {
            consulta.setPaciente("Não");
        }
        //PADRÃO DE CONSULTA REALIZADA
        consulta.setconsRealizada("Não");

        return consulta;
    }

    //INSERE OS VALORES NA LISTA
    private void inserirConsulta(Consulta consulta) {

        //ADICIONA DADOS A LISTA
        ListaConsultas.Adicionar(consulta);

        //MENSAGEM DE FEEDBACK
        JOptionPane.showMessageDialog(null, "Cadastro realizado com sucesso");

    }

    //VERIFICA SE OS CAMPOS ESTÃO EM BRANCO
    private boolean camposVazios() {

        boolean empty = true;

        if (txtNome.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Digite o nome.");
        } else if (txtTelefone.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Digite o telefone, formato (DDD)00000-0000.");
        } else if (txtCPF.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Digite o CPF, formato 000.000.000-00.");
        } else if (txtData.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "Digite a data, formato DD/MM/AAAA.");
        } else {
            empty = false;
        }

        return empty;

    }

    //VAI VERIFICAR A FORMATAÇÃO DAS STRINGS E SE FOI PREENCHIDO CORRETAMENTE
    private boolean camposValidos() {

        boolean valido = true;

        String strNome = txtNome.getText();
        String strTelefone = txtTelefone.getText();
        String strCPF = txtCPF.getText();
        String strData = txtData.getText();

        boolean verificaNome = strNome.matches("^[a-zA-Z ]*$");
        boolean verificaTelefone = strTelefone.matches("[(][0-9]{3}[)][0-9]{5}[-][0-9]{4}");
        boolean verificaCPF = strCPF.matches("[0-9]{3}[.][0-9]{3}[.][0-9]{3}[-][0-9]{2}");
        boolean verificaData = strData.matches("[0-9]{2}[/][0-9]{2}[/][0-9]{4}");

        if (verificaNome == false) {
            JOptionPane.showMessageDialog(rootPane, "Nome deve conter apenas letras.");
        } else if (verificaTelefone == false) {
            JOptionPane.showMessageDialog(rootPane, "Telefone deve estar no formato (DDD)00000-0000.");
        } else if (verificaCPF == false) {
            JOptionPane.showMessageDialog(rootPane, "CPF deve estar no formato 000.000.000-00.");
        } else if (verificaData == false) {
            JOptionPane.showMessageDialog(rootPane, "Data deve estar no formato DD/MM/AAAA.");
        } else {
            valido = false;
        }

        return valido;
    }

    //ATUALIZA OS ITENS NA TABELA
    protected DefaultTableModel getModeloTabela() {

        if (!ListaConsultas.Listar().isEmpty()) {

            Consulta atualizaConsultas;

            tableModel = new DefaultTableModel(tableColumns, 0);

            for (int i = 0; i < ListaConsultas.Listar().size(); i++) {

                atualizaConsultas = ListaConsultas.Listar().get(i);

                String[] linha = {atualizaConsultas.getNome(), atualizaConsultas.getCPF(), atualizaConsultas.getTelefone(),
                    atualizaConsultas.getData(), atualizaConsultas.getPaciente(), atualizaConsultas.getconsRealizada(), atualizaConsultas.getreceitaObs()};

                tableModel.addRow(linha);
            }

        } else {

            tableModel = new DefaultTableModel(tableColumns, 0);
        }

        return tableModel;
    }

}
